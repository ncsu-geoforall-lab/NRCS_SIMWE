{
  "hash": "01930827e8fdf3c133cdc8677046cb0c",
  "result": {
    "engine": "jupyter",
    "filters": [],
    "includes": {},
    "markdown": "---\njupyter: python3\nauthor: Corey T. White\nexecute:\n  eval: false\n  freeze: auto\ndate-modified: today\nformat:\n  html:\n    toc: true\n    code-tools: true\n    code-copy: true\n    code-fold: false\n---\n\n::: {#9cbecc81 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport subprocess\nimport sys\n# import numpy as np\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\nfrom PIL import Image\nimport pandas as pd\nimport sqlite3\nfrom IPython.display import IFrame\n\nfrom SALib.analyze.sobol import analyze\nfrom SALib.sample.sobol import sample\nfrom SALib.test_functions import Ishigami\nimport numpy as np\nimport seaborn as sns\n\n# Ask GRASS GIS where its Python packages are.\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Import the GRASS GIS packages we need.\nimport grass.script as gs\n\n# Import GRASS Jupyter\nimport grass.jupyter as gj\n```\n:::\n\n\n::: {#8d796f0b .cell execution_count=2}\n``` {.python .cell-code}\ngisdb = os.path.join(os.getenv('HOME'), 'grassdata')\nsite = 'SJER'\n# site = 'clay-center'\nmapset = 'sensitivity_1'\ngj.init(gisdb, site, mapset)\n```\n:::\n\n\n::: {#ee2fbee6 .cell execution_count=3}\n``` {.python .cell-code}\ngs.run_command('g.region', raster='elevation_1', flags='ap')\ngs.run_command('r.univar', map='elevation_1', flags='e')\nres = 1\nscalar = '4'\nraster = f'depth_{res}_{scalar}_s_30_average'\nerrorMap = gj.Map()\nrelief_map = f\"elevation_{res}_relief\"\nerrorMap.d_shade(\n        color=f\"depth_{res}_{scalar}_s_30_average\",\n        shade=relief_map,\n        brighten=30,\n        overwrite=True,\n    )\nerrorMap.d_legend(\n        title=f\"Depth (m)\",\n        raster=f\"depth_{res}_{scalar}_s_30_average\",\n        at=(5, 35, 84, 91),\n        flags=\"bsl\",\n        fontsize=14,\n    )\nerrorMap.d_barscale(at=(1, 5), flags=\"n\")\nerrorMap.show()\n```\n:::\n\n\n::: {#aad0039e .cell execution_count=4}\n``` {.python .cell-code}\n# !g.extension extension=r.tri\n# !g.extension extension=r.mapcalc.tiled\n```\n:::\n\n\n::: {#e1a2161e .cell execution_count=5}\n``` {.python .cell-code}\n# Terrain Ruggedness Index\ngs.run_command(\"r.tri\", input=\"elevation_1\", output=\"tri_1\", processes=4, overwrite=True)\ngs.run_command('r.univar', map='tri_1', flags='e')\nerrorMap = gj.Map()\nerrorMap.d_shade(\n        color=\"tri_1\",\n        shade=relief_map,\n        brighten=30,\n        overwrite=True,\n    )\nerrorMap.d_legend(\n        title=f\"Terrain Ruggedness Index\",\n        raster=\"tri_1\",\n        at=(5, 35, 84, 91),\n        flags=\"bsl\",\n        fontsize=14,\n    )\n# errorMap.d_text(text=\"30\", size=\"18\", at=\"80,80\", color=\"black\" , bgcolor=\"none\")\nerrorMap.d_barscale(at=(1, 5), flags=\"n\")\nerrorMap.show()\n```\n:::\n\n\n::: {#c35ce143 .cell execution_count=6}\n``` {.python .cell-code}\n# !g.list type=raster mapset=basic\n!r.surf.area map=elevation units=kilometers\n```\n:::\n\n\n::: {#82d395af .cell execution_count=7}\n``` {.python .cell-code}\nanalysis_metadata = os.path.join(\"../output\", site, mapset, 'sensitivity_analysis_1.csv')\n\ndf_metadata = pd.read_csv(analysis_metadata)\ndf_metadata['area_m2'] = df_metadata['cells'] * df_metadata['resolution'] ** 2\ndf_metadata['area_km2'] = df_metadata['area_m2'] / 1e6\ndf_metadata[\"p_density\"] = df_metadata[\"particles\"] / df_metadata[\"cells\"]\ndf_metadata[\"error\"] = 1.0 / np.sqrt(df_metadata[\"particles\"])\ndf_metadata[\"tri\"] = 0.028\ndf_metadata.to_csv(os.path.join(\"../output\", site, mapset, 'metadata_analysis_1.csv'))\ndf_metadata.head(50)\n```\n:::\n\n\n::: {#ee17b014 .cell execution_count=8}\n``` {.python .cell-code}\ndf_grouped = (\n    df_metadata\n        .groupby(by=['resolution', 'scalar'])\n        .agg({\n            'run_time': 'mean',\n            'particles': 'mean',\n            'cells': 'max',\n            'area_km2': 'max',\n            'p_density': 'max',\n            'error': \"mean\"\n        })\n        .reset_index()\n)\n\ndf_grouped.head(20)\n```\n:::\n\n\n::: {#4b9406f7 .cell execution_count=9}\n``` {.python .cell-code}\ndf_grouped.info()\n```\n:::\n\n\n::: {#c9f78706 .cell execution_count=10}\n``` {.python .cell-code}\nsns.color_palette(\"crest\", as_cmap=True)\nsns.histplot(\n    data=df_metadata,\n    x=\"run_time\",\n    hue=\"resolution\",\n    weights=\"error\",\n    bins=30,\n    log_scale=(True, False),\n    color=\"blue\"\n)\nplt.xlabel(\"Run Time (s)\")\nplt.ylabel(\"Frequency\")\n# plt.legend(title=\"Particle Density\")\nplt.title(\"Histogram of Run Time\")\nplt.show()\n```\n:::\n\n\n::: {#951184ca .cell execution_count=11}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=df_metadata,\n    x=\"p_density\",\n    y=\"run_time\",\n    hue=\"resolution\",\n    palette=\"crest_r\",\n    weights='error',\n    alpha=0.75,\n    errorbar=('ci', 95)\n)\nplt.xlabel(\"Particle Density\", fontsize=26)\nplt.ylabel(\"Time (s)\", fontsize=26)\nplt.title(\"Run time vs. Particles\", fontsize=32)\nplt.legend(title=\"Particle Density\", fontsize=18)\nplt.savefig(os.path.join(\"../output\", site, mapset, f'{site}_run_time_res_line_plot.png'))\n\n# plt.savefig(f\"../output/{site}/{mapset}/{site}_run_time_res_line_plot.png\")\nplt.show()\n```\n:::\n\n\n::: {#f3715fbf .cell execution_count=12}\n``` {.python .cell-code}\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a scatter plot\nsc = ax.scatter(\n    df_metadata['p_density'],\n    df_metadata['resolution'],\n    df_metadata['run_time'],\n    c=df_metadata['error'],\n    cmap='viridis',\n    alpha=0.75,\n    marker='o'\n)\n\n# Add color bar\ncbar = plt.colorbar(sc, ax=ax, pad=0.1)\ncbar.set_label('Compute Time (s)')\n\n# Set labels\nax.set_xlabel('Particle Density')\nax.set_ylabel('Spatial Resolution (m)')\nax.set_zlabel('Compute Time (s)')\n\n# Reverse the order of the x-axis labels\nax.invert_xaxis()\n\n# Set view angle\nax.view_init(elev=20., azim=-35, roll=0)\n\nplt.title('3D Scatter Plot of Compute Time vs Particle Density and Spatial Resolution')\nplt.show()\n```\n:::\n\n\n::: {#2023dc70 .cell execution_count=13}\n``` {.python .cell-code}\nsns.barplot(\n    df_grouped, #.query(\"resolution > 1\"),\n    x=\"resolution\",\n    y=\"run_time\",\n    hue=\"scalar\",\n    palette=\"crest_r\",\n    # width=.4,\n    # palette=\"vlag\"\n)\n```\n:::\n\n\n::: {#d2dc47e2 .cell execution_count=14}\n``` {.python .cell-code}\ndf_metadata_pivot = df_metadata.pivot_table(index=\"p_density\", columns=\"resolution\", values=\"run_time\")\nsns.heatmap(\n    df_metadata_pivot,\n    annot=True,\n    fmt=\".1f\",\n    cmap=\"crest_r\"\n)\n\nplt.ylabel(\"Particle Density\")\n```\n:::\n\n\n::: {#ab956052 .cell execution_count=15}\n``` {.python .cell-code}\n!g.remove -f type=raster pattern=\"*_01m*\"\n```\n:::\n\n\n::: {#a983d96b .cell execution_count=16}\n``` {.python .cell-code}\ndef get_simwe_time_steps(search_pattern):\n    \"\"\"Returns a list of time steps from the SIMWE output as \"\"\"\n    timestep_list = gs.read_command(\n        \"g.list\",\n        type=\"raster\",\n        pattern=search_pattern,\n        separator=\"comma\",\n    ).strip()\n    # print(timestep_list)\n    time_steps = [str(t.split(\".\")[-1]) for t in timestep_list.split(\",\")]\n    # print(time_steps)\n    def filter_subset(x):\n        # print(x)\n        if \"_01m\" not in x:\n            return x\n\n    time_steps_filtered = filter(lambda x: filter_subset(x), time_steps)\n    return sorted(list(set(time_steps_filtered)))\n\nres = \"30\"\nscalar_str = \"025\"\nmethod = \"average\"\nmethods = \"average,median,minimum,min_raster,maximum,max_raster,stddev,range\"\ntest_list =  get_simwe_time_steps(f\"depth_{res}_{scalar_str}_*.*\")\nprint(test_list)\n```\n:::\n\n\n::: {#240991d0 .cell execution_count=17}\n``` {.python .cell-code}\nfor step in test_list:\n    # print(step)\n    # Get list of maps for the current time step\n    search_pattern = f\"depth_{res}_{scalar_str}_*.{step}\"\n    depth_list = gs.read_command(\n        \"g.list\",\n        type=\"raster\",\n        pattern=search_pattern,\n        separator=\"comma\",  # noqa: E501\n    ).strip()\n\n    strds_name = f\"depth_{res}_{scalar_str}_s_{method}\"\n\n    if depth_list:\n        print(f\"Time step {step} has {len(depth_list.split(','))} maps\")\n        print(depth_list)\n\n        depth_simwe_methods = \"average,median,minimum,maximum\"\n        depth_series_outputs = \",\".join(\n            [\n                f\"depth_{res}_{scalar_str}_s_{step}_{m}\"\n                for m in depth_simwe_methods.split(\",\")\n            ]\n        )\n        last_depth_time_step = depth_list.split(',')[-1]\n        print(f\"last_depth_time_step: {last_depth_time_step}\")\n        print(depth_series_outputs)\n\n```\n:::\n\n\n::: {#08a063a8 .cell execution_count=18}\n``` {.python .cell-code}\n# !t.list type=strds where=\"mapset = 'sensitivity_1'\"\n# depth_30_025_s_05_01m\nres = \"30\"\nscalar_str = \"4\" #\"025\"  0.5, 1, 2, 4\nmethod = \"median\"\nmethods = \"average,median,minimum,min_raster,maximum,max_raster,stddev,range\"\n# Average SWIME Simulation STRDS from 10 SIMWE simulations\ndepth_average = f\"depth_{res}_{scalar_str}_s_median\"\ndisch_average = f\"discharge_{res}_{scalar_str}_s_average\"\n\n# Single SWIME Simulation STRDS\ndepth_single_run = f\"depth_sum_{res}_{scalar_str}\"\ndisch_single_run = f\"depth_sum_{res}_{scalar_str}\"\n\n# def filter_subset(x):\n#     if \"_01m\" in x:\n#         return x\n\n# for method in methods.split(\",\"):\n#     depth_average = f\"depth_{res}_{scalar_str}_s_{method}\"\n#     umaps=f\"depth_30_{scalar_str}_s_05_01m_{method},depth_30_{scalar_str}_s_05_{method},depth_30_{scalar_str}_s_09_01m_{method},depth_30_{scalar_str}_s_09_{method},depth_30_{scalar_str}_s_14_01m_{method},depth_30_{scalar_str}_s_14_{method},depth_30_{scalar_str}_s_18_01m_{method},depth_30_{scalar_str}_s_18_{method},depth_30_{scalar_str}_s_23_01m_{method},depth_30_{scalar_str}_s_23_{method},depth_30_{scalar_str}_s_28_01m_{method},depth_30_{scalar_str}_s_28_{method}\".split(\",\")\n#     remove_list = \",\".join(filter(lambda x: filter_subset(x), umaps))\n#     print(remove_list)\n#     !t.unregister type=raster input={depth_average} maps={remove_list}\n#     !t.unregister type=raster maps={remove_list}\n\n# gs.run_command(\"t.info\", input=depth_average)\n```\n:::\n\n\n::: {#bd6a681d .cell execution_count=19}\n``` {.python .cell-code}\ndf_grouped.query(f\"resolution == 30 and scalar == {scalar_str.replace('0', '0.')}\")[\"run_time\"].values[0]\n```\n:::\n\n\n::: {#93a04e45 .cell execution_count=20}\n``` {.python .cell-code}\n!t.rast.univar -e {depth_average}\n```\n:::\n\n\n::: {#423d1862 .cell execution_count=21}\n``` {.python .cell-code}\ndef univar_stats_df(raster_list, res, scalar_str, method, ars):\n    stats_list = []\n    for raster in raster_list.split(\",\"):\n        gs.run_command(\"g.region\", raster=raster, flags=\"a\")\n        stats = gs.parse_command(\"r.univar\", map=raster, format=\"json\", flags=\"e\")[0]\n\n\n        extra_stats = df_grouped.query(f\"resolution == {res} and scalar == {scalar_str.replace('0', '0.')}\")\n        stats[\"run_time\"] = extra_stats[\"run_time\"].values[0]\n        stats[\"particles\"] = extra_stats[\"particles\"].values[0]\n        stats[\"area_km2\"] = extra_stats[\"area_km2\"].values[0]\n        stats[\"resolution\"] = res\n        stats[\"scalar\"] = scalar_str\n        stats[\"minute\"] = raster.split(\"_\")[4]\n        stats[\"stat_type\"] = method\n        stats[\"ars\"] = ars\n        stats_list.append(stats)\n\n    return pd.DataFrame(stats_list)\n\n# raster_depth_list = gs.read_command(\n#         \"g.list\", type=\"raster\", pattern=\"depth_sum_*_*_*_stats_*\", separator=\"comma\"  # noqa: E501\n# ).strip()\n\n\n\nmodel_spatial_res_params = [\"1\", \"3\", \"5\", \"10\", \"30\"]  # meters\nmodel_particle_density_scalar_params = [\"025\", \"05\", \"1\", \"2\", \"4\"]\nmethods = \"average,median,minimum,min_raster,maximum,max_raster,stddev,range\"\ndataframe_list = []\nfor res in model_spatial_res_params:\n    ars_map = f\"ars_{res}\"\n    gs.run_command(\"g.region\", raster=f\"elevation_{res}\", flags=\"a\")\n    gs.run_command(\"r.tri\", input=f\"elevation_{res}\", output=ars_map, size=5, processes=6, overwrite=True)\n    json_data = gs.parse_command('r.univar', map=ars_map, format='json')\n    ars = json_data[0]['mean']\n\n    for scalar_str in model_particle_density_scalar_params:\n        for method in methods.split(\",\"):\n            depth_average = f\"depth_{res}_{scalar_str}_s_{method}\"\n            raster_depth_list = gs.parse_command(\n                \"t.rast.list\",\n                input=depth_average,\n                format=\"json\"\n            )\n            raster_depth_list= \",\".join([m['name'] for m in raster_depth_list['data']])\n            depth_stats_df = univar_stats_df(raster_depth_list, res, scalar_str, method, ars)\n            dataframe_list.append(depth_stats_df)\n            # depth_stats_df.head()\n\nresult_vertical = pd.concat(dataframe_list)\n```\n:::\n\n\n::: {#ab3ad981 .cell execution_count=22}\n``` {.python .cell-code}\n# result_vertical[\"minute\"] = result_vertical[\"minute\"].astype(int)\n# Compute the error\nresult_vertical[\"error\"] = 1.0 / np.sqrt(result_vertical[\"particles\"])\n\n# Normalize the error relative to the base case (e.g., scalar = 1)\nbase_error = result_vertical[result_vertical[\"scalar\"] == '1'][\"error\"].values\nresult_vertical[\"run_id\"] = result_vertical['resolution'].astype(str) + \"_\" + result_vertical['scalar'].astype(str)\nresult_vertical[\"normalized_error\"] = result_vertical[\"error\"] / base_error[0]\nresult_vertical[\"p_density\"] = result_vertical[\"particles\"] / result_vertical[\"cells\"]\n\nresult_vertical.to_csv(os.path.join(\"../output\", site, mapset, 'metadata_depth_analysis_1.csv'))\n```\n:::\n\n\n::: {#8a4a585b .cell execution_count=23}\n``` {.python .cell-code}\nresult_vertical.query(\"stat_type == 'average' and minute == '30'\").head()\n```\n:::\n\n\n::: {#456ae6f4 .cell execution_count=24}\n``` {.python .cell-code}\nresult_vertical.describe()\n```\n:::\n\n\n::: {#e6c0afc2 .cell execution_count=25}\n``` {.python .cell-code}\nsns.scatterplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=\"resolution\",\n    y=\"mean\",\n    size=\"error\",\n    hue='run_time'\n)\n```\n:::\n\n\n::: {#3391f2c6 .cell execution_count=26}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=\"resolution\",\n    y=\"mean\",\n    hue=\"scalar\",\n    palette=\"crest_r\",\n    alpha=0.75,\n    # ax=ax,\n    markers=True,\n    # kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Resolution (m)\", fontsize=26)\nplt.ylabel(\"Depth (m)\", fontsize=26)\nplt.title(\"SJER Mean depth vs. resolution\", fontsize=32)\nplt.savefig(f\"../output/{site}/{mapset}/{site}_mean_depth_res_line_plot.png\")\nplt.show()\n```\n:::\n\n\n::: {#f792f396 .cell execution_count=27}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=\"resolution\",\n    y=\"min\",\n    hue=\"scalar\",\n    palette=\"crest_r\",\n    alpha=0.75,\n    # col=\"stat_type\",\n    # row=\"stat_type\",\n    # errorbar=('ci', 95),\n    markers=False,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Resolution (m)\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"SJER Average Min depth vs. resolution\")\nplt.show()\n```\n:::\n\n\n::: {#4e702c00 .cell execution_count=28}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=\"resolution\",\n    y=\"max\",\n    hue=\"scalar\",\n    palette=\"crest_r\",\n    alpha=0.75,\n    # col=\"stat_type\",\n    # row=\"stat_type\",\n    # errorbar=('ci', 95),\n    markers=True,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Resolution (m)\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"SJER Average Max depth vs. resolution\")\nplt.show()\n```\n:::\n\n\n::: {#f27d253d .cell execution_count=29}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type != 'max_raster' and stat_type != 'min_raster'\"),\n    x=\"resolution\",\n    y=\"mean\",\n    hue=\"run_time\",\n    palette=\"crest_r\",\n    alpha=0.75,\n    col=\"scalar\",\n    row=\"stat_type\",\n    # errorbar=('ci', 95),\n    markers=True,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Resolution (m)\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"SJER Average Max depth vs. resolution\")\nplt.show()\n```\n:::\n\n\n::: {#4500b381 .cell execution_count=30}\n``` {.python .cell-code}\n# sns.jointplot(\n#     data=result_vertical.query(\"stat_type == 'average'\"),\n#     x=\"mean\", y=\"run_time\", hue=\"resolution\",\n#     kind=\"kde\"\n# )\nsns.displot(\n    result_vertical.query(\"stat_type == 'median'\"),\n    col=\"scalar\",\n    x=\"mean\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n\nsns.displot(\n    result_vertical.query(\"stat_type == 'median'\"),\n    col=\"scalar\",\n    x=\"min\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n\nsns.displot(\n    result_vertical.query(\"stat_type == 'median'\"),\n    col=\"scalar\",\n    x=\"max\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n\nsns.displot(\n    result_vertical.query(\"stat_type == 'median'\"),\n    col=\"scalar\",\n    x=\"stddev\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n\nsns.displot(\n    result_vertical.query(\"stat_type == 'median'\"),\n    col=\"scalar\",\n    x=\"range\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n```\n:::\n\n\n::: {#d542b4b3 .cell execution_count=31}\n``` {.python .cell-code}\nsns.displot(\n    result_vertical,\n    col=\"scalar\",\n    row=\"stat_type\",\n    x=\"range\",\n    # x=\"run_time\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"crest_r\",\n)\n```\n:::\n\n\n::: {#29cd808e .cell execution_count=32}\n``` {.python .cell-code}\nsns.set_context(\"notebook\")\n# sns.\nsns.scatterplot(\n    data=result_vertical, #.query(\"stat_type == 'average'\"),\n    x=\"ars\",\n    y=\"run_time\",\n    # hue=\"resolution\",\n    palette=\"crest_r\",\n    alpha=0.5,\n    # size=\"run_time\",\n    # col=\"scalar\",\n    # row=\"resolution\",\n    # row=\"stat_type\",\n    # errorbar=('ci', 95),\n    # markers=True,\n    # kind=\"line\",\n    # style=\"scalar\"\n)\n\nplt.xlabel(\"Minutes\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"SJER Average Minimum depth\")\nplt.show()\n```\n:::\n\n\n::: {#3250be6f .cell execution_count=33}\n``` {.python .cell-code}\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\ndf = result_vertical.query(\"stat_type == 'average'\")\n# Plot Mean Depth\n# ax1.plot(df[\"p_density\"], df[\"mean\"], 'g-', marker='o', label=\"Mean Depth\")\nax1 = sns.regplot(data=df, x=\"p_density\", y=\"run_time\", color=\"blue\")\nax1.set_xlabel(\"Number of Particles\")\nax1.set_ylabel(\"Mean Depth\", color='b')\n\n# Plot Compute Time\n# ax2.plot(df[\"p_density\"], df[\"run_time\"], 'b-', marker='s', label=\"Compute Time\")\nax2 = sns.regplot(data=df, x=\"p_density\", y=\"ars\", color='orange')\nax2.set_ylabel(\"Compute Time (seconds)\", color='orange')\n\nplt.title(\"Mean Depth and Compute Time vs Particles\")\nplt.show()\n```\n:::\n\n\n::: {#ff4e3040 .cell execution_count=34}\n``` {.python .cell-code}\ndf_metadata_pivot = result_vertical.query(\"stat_type == 'average'\").pivot_table(index=\"scalar\", columns=\"resolution\", values=\"range\")\nsns.heatmap(\n    df_metadata_pivot,\n    annot=True,\n    fmt=\".3f\",\n    cmap=\"crest_r\"\n)\n\nplt.ylabel(\"Particle Density\")\n```\n:::\n\n\n::: {#9683e1f1 .cell execution_count=35}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=result_vertical.query(\"stat_type == 'average'\")[\"minute\"].astype(int),\n    y=\"max\",\n    hue=\"resolution\",\n    palette=\"crest_r\",\n    alpha=0.5,\n    markers=True,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Minutes\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"Maximum Depth\")\nplt.show()\n```\n:::\n\n\n::: {#936e09c3 .cell execution_count=36}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=result_vertical.query(\"stat_type == 'average'\")[\"minute\"].astype(int),\n    y=\"range\",\n    hue=\"resolution\",\n    palette=\"crest_r\",\n    alpha=0.5,\n    markers=True,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Minutes\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"Range Depth\")\nplt.show()\n```\n:::\n\n\n::: {#f76f854b .cell execution_count=37}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    x=result_vertical.query(\"stat_type == 'average'\")[\"minute\"].astype(int),\n    y=\"stddev\",\n    hue=\"resolution\",\n    palette=\"crest_r\",\n    alpha=0.5,\n    markers=True,\n    kind=\"line\",\n    style=\"scalar\"\n)\n\nplt.xlabel(\"Minutes\")\nplt.ylabel(\"Depth (m)\")\nplt.title(\"Stddev\")\nplt.show()\n```\n:::\n\n\n::: {#f309f671 .cell execution_count=38}\n``` {.python .cell-code}\n# sns.jointplot(\n#     data=result_vertical.query(\"stat_type == 'median'\"),\n#     x=result_vertical.query(\"stat_type == 'median'\")[\"minute\"].astype(int),\n#     y=\"max\",\n#     # hue=\"resolution\",\n#     hue=\"ars\",\n#     # xlim=[-5,34],\n#     kind=\"kde\",\n#     palette=\"crest_r\"\n# )\n# fig, ax = plt.subplots(figsize=(12, 8))\nsns.jointplot(\n    data=result_vertical.query(\"stat_type == 'median'\"),\n    x=result_vertical.query(\"stat_type == 'median'\")[\"minute\"].astype(int),\n    y=\"max\",\n    hue=\"resolution\",\n    kind=\"kde\",\n    palette=\"magma\",\n)\nplt.xlabel(\"Time Step Minutes\")\nplt.ylabel(\"Max Depth (m)\")\nplt.savefig(f\"../output/{site}/{mapset}/{site}_max_depth_res_joint_plot.png\")\n```\n:::\n\n\n::: {#bcfca52a .cell execution_count=39}\n``` {.python .cell-code}\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111, projection='3d')\n\n# Create a scatter plot\nsc = ax.scatter(\n    result_vertical.query(\"stat_type == 'median'\")['ars'],\n    result_vertical.query(\"stat_type == 'median'\")[\"minute\"].astype(int),\n\n    result_vertical.query(\"stat_type == 'median'\")['median'],\n    # df_metadata['resolution'],\n    # df_metadata['run_time'],\n    c=result_vertical.query(\"stat_type == 'median'\")['p_density'],\n    cmap='viridis',\n    alpha=0.75,\n    marker='o'\n)\n\n# Add color bar\ncbar = plt.colorbar(sc, ax=ax, pad=0.1)\ncbar.set_label('Compute Time (s)')\n\n# Set labels\nax.set_xlabel('Particle Density')\nax.set_ylabel('Spatial Resolution (m)')\nax.set_zlabel('Compute Time (s)')\n\n# Reverse the order of the x-axis labels\nax.invert_xaxis()\n\n# Set view angle\n# ax.view_init(elev=20., azim=-35, roll=0)\n\nplt.title('3D Scatter Plot of Compute Time vs Particle Density and Spatial Resolution')\nplt.show()\n```\n:::\n\n\n::: {#2e5fbe9b .cell execution_count=40}\n``` {.python .cell-code}\n# sns.histplot(\n#     data=result_vertical.query(\"stat_type == 'average'\"),\n#     x=\"mean\",\n#     hue=\"resolution\"\n# )\n\nsns.histplot(\n    data=result_vertical.query(\"stat_type == 'median'\"),\n    x=\"median\",\n    hue=\"resolution\"\n)\n```\n:::\n\n\n::: {#bb6a6d83 .cell execution_count=41}\n``` {.python .cell-code}\nsns.relplot(\n    data=result_vertical.query(\"stat_type == 'average'\"),\n    # x=\"particles\",\n    x=\"p_density\",\n    y=\"error\",\n    hue=\"resolution\",\n    palette=\"crest_r\",\n    alpha=0.5,\n    markers=True,\n    kind=\"line\",\n    style=\"resolution\"\n)\n\nplt.xlabel(\"Particle Density\")\nplt.ylabel(\"Error 1/sqrt(Particles)\")\nplt.title(\"Clay Center Error vs. Particle Density\")\nplt.show()\n```\n:::\n\n\n::: {#307b522c .cell execution_count=42}\n``` {.python .cell-code}\nsns.histplot(\n    data=result_vertical.query(\"stat_type == 'median'\"),\n    x=\"median\",\n    hue=\"resolution\",\n    element=\"poly\",\n    stat=\"percent\"\n)\n```\n:::\n\n\n::: {#1299b27e .cell execution_count=43}\n``` {.python .cell-code}\nfrom PIL import Image\nimport imageio.v3 as iio\nimport os\n\ndef create_webp_animation(input_pngs, output_file, fps=60, loop=0):\n    # Get a sorted list of PNG files in the input folder\n    png_files = sorted(input_pngs)\n\n    if not png_files:\n        raise ValueError(\"No PNG files found in the specified folder.\")\n\n    # Read images\n    images = [Image.open(png) for png in png_files]\n\n    # Save as animated WebP\n    iio.imwrite(\n        output_file,\n        [image for image in images],\n        plugin=\"pillow\",\n        format=\"webp\",\n        fps=fps,\n        loop=loop,\n    )\n\n    print(f\"Animated WebP saved as {output_file}\")\n\ndef create_static_map(site, res, scalar, step, method):\n    PROJECT_MAPSET = \"sensitivity_1\"\n    # site = \"clay-center\"\n    output_image = f\"../output/{site}/{PROJECT_MAPSET}/{site}_depth_{res}_{scalar}_s_{step}_{method}.png\"\n    dem_map = gj.Map(\n        use_region=True,\n        height=600,\n        width=600,\n        filename=output_image,\n    )\n    relief_map = f\"elevation_{res}_relief\"\n\n\n    dem_map.d_shade(\n        color=f\"depth_{res}_{scalar}_s_{step}_{method}\",\n        shade=relief_map,\n        brighten=30,\n        overwrite=True,\n    )\n\n    # SJER\n    dem_map.d_legend(\n        title=f\"Depth (m)\",\n        raster=f\"depth_{res}_{scalar}_s_{step}_{method}\",\n        at=(10, 40, 82, 89),\n        flags=\"bs\",\n        fontsize=14,\n    )\n    dem_map.d_barscale(at=(1, 12), flags=\"n\")\n\n    # Clay Center\n    # dem_map.d_legend(\n    #     title=f\"Depth (m)\",\n    #     raster=f\"depth_{res}_{scalar}_s_{step}_{method}\",\n    #     at=(5, 35, 84, 91),\n    #     flags=\"bs\",\n    #     fontsize=14,\n    # )\n    # dem_map.d_barscale(at=(1, 7), flags=\"n\")\n\n    dem_map.d_text(text=f\"{step}\", size=\"18\", at=\"80,80\", color=\"black\" , bgcolor=\"none\")\n\n    return output_image\n\ndef get_agg_simwe_time_steps(search_pattern):\n    \"\"\"Returns a list of time steps from the SIMWE output as \"\"\"\n    timestep_list = gs.read_command(\n        \"g.list\",\n        type=\"raster\",\n        pattern=search_pattern,\n        separator=\"comma\",\n    ).strip()\n    # print(timestep_list)\n    black_list = [\"min_raster\", \"max_raster\"]\n    time_steps = [\n        str(t.split(\"_\")[-3]) if any(black in t for black in black_list) else str(t.split(\"_\")[-2]) for t in timestep_list.split(\",\")]\n    # print(time_steps)\n    def filter_subset(x):\n        # print(x)\n        if \"_01m\" not in x:\n            return x\n\n    time_steps_filtered = filter(lambda x: filter_subset(x), time_steps)\n    return sorted(list(set(time_steps_filtered)))\n\n# create_static_map(site=None, res=res, scalar=scalar_str, step=\"14\", method=\"average\")\n```\n:::\n\n\n::: {#ee5320b7 .cell execution_count=44}\n``` {.python .cell-code}\nmodel_spatial_res_params = [\"1\", \"3\", \"5\", \"10\", \"30\"]  # meters\nmodel_particle_density_scalar_params = [\"025\", \"05\", \"1\", \"2\", \"4\"]\nmethods = \"average\" #median,minimum,min_raster,maximum,max_raster,stddev,range\"\ndataframe_list = []\noutput_type = 'depth'\nfor res in model_spatial_res_params:\n    gs.run_command(\"g.region\", raster=f\"elevation_{res}\", flags=\"a\")\n    for scalar_str in model_particle_density_scalar_params:\n        for method in methods.split(\",\"):\n            depth_average = f\"{output_type}_{res}_{scalar_str}_s_{method}\"\n            raster_depth_list = gs.parse_command(\n                \"t.rast.list\",\n                input=depth_average,\n                format=\"json\"\n            )\n            raster_depth_list= [m['name'] for m in raster_depth_list['data']]\n            output_pngs = []\n            time_steps = get_agg_simwe_time_steps(f\"{output_type}_{res}_{scalar_str}_s_*_{method}\")\n            # print(time_steps)\n            for step in time_steps:\n                output_png = create_static_map(site, res, scalar_str, step, method)\n                output_pngs.append(output_png)\n            # print(output_pngs)\n            create_webp_animation(output_pngs, f\"../output/{site}/{mapset}/{site}_{output_type}_{res}_{scalar_str}_s_{method}.webp\", fps=1, loop=0)\n            # create_static_map(site=None, res=res, scalar=scalar_str, step=, method)\n```\n:::\n\n\n::: {#a26a7b4e .cell execution_count=45}\n``` {.python .cell-code}\nvs_map = gj.InteractiveMap()\nvs_map.add_raster(\"elevation\", opacity=0.8)\nvs_map.add_raster(f\"depth_1_1_s_30_average\", opacity=0.5)\nvs_map.add_layer_control()\nvs_map.show()\n```\n:::\n\n\n::: {#355aee6d .cell execution_count=46}\n``` {.python .cell-code}\ndef sample_outlet(n, time_steps):\n    tmp_data = []\n    res = \"1\"\n    scalar_str = \"4\"\n    method= \"median\"\n    # gs.run_command(\"v.random\", output=\"random_points\", npoints=n, seed=8)\n    time_steps = get_agg_simwe_time_steps(f\"depth_{res}_{scalar_str}_s_*_{method}\")\n    for step in time_steps:\n        json_output = gs.parse_command(\"r.what\", points=\"outlet\", map=f\"depth_{res}_1_s_{step}_median,depth_{res}_1_s_{step}_minimum,depth_{res}_1_s_{step}_maximum\", format=\"json\")\n        print(json_output[0])\n        new_json = {\n            \"step\": int(step),\n            \"core\": json_output[0][f\"depth_{res}_1_s_{step}_minimum\"][\"value\"],\n            \"envelope\": json_output[0][f\"depth_{res}_1_s_{step}_maximum\"][\"value\"],\n            \"median\": json_output[0][f\"depth_{res}_1_s_{step}_median\"][\"value\"]\n        }\n        tmp_data.append(new_json)\n\n    df = pd.DataFrame(tmp_data)\n    return df\n\ndf_samples = sample_outlet(1, time_steps)\n```\n:::\n\n\n::: {#192551ba .cell execution_count=47}\n``` {.python .cell-code}\nf, ax = plt.subplots(figsize=(11, 9))\nsns.lineplot(data=df_samples, x=\"step\", y=\"core\")\nsns.lineplot(data=df_samples, x=\"step\", y=\"median\", dashes=True)\nsns.lineplot(data=df_samples, x=\"step\", y=\"envelope\")\nplt.legend([\"Core\", \"Median\", \"Envelope\"])\nplt.show()\n```\n:::\n\n\n::: {#a4dbb9c6 .cell execution_count=48}\n``` {.python .cell-code}\ngisdb = os.path.join(os.getenv('HOME'), 'grassdata')\n# site = 'clay-center'\n# site = 'coweeta'\n# site = 'SJER'\n# site = 'SFREC'\nsite = 'tx069-playas'\nPROJECT_MAPSET = 'sensitivity_7'\ngj.init(gisdb, site, PROJECT_MAPSET)\n```\n:::\n\n\n::: {#ac177a7c .cell execution_count=49}\n``` {.python .cell-code}\n# Clay Center 3D\n# Perspective: 30\n# Height: 22\n# Z-exag 100\n# Tilt: 0\n# Direction: SW (235)\n# Light Direction: (235)\n# Light Height: 80\n\ndef wave_animation_3d():\n    model_spatial_res_params = [1, 3, 10, 30] # [\"1\", \"3\", \"5\", \"10\", \"30\"]  # meters\n    model_particle_density_scalar_params = [\"025\", \"05\", \"1\", \"2\"] #[\"025\", \"05\", \"1\", \"2\", \"4\"]\n    # model_particle_density_scalar_params = [\"4\"]\n\n    methods = \"average\" #median,minimum,min_raster,maximum,max_raster,stddev,range\"\n    dataframe_list = []\n    output_type = 'depth'\n    for res in model_spatial_res_params:\n        gs.run_command(\"g.region\", raster=f\"elevation_{res}\", flags=\"a\")\n        for scalar_str in model_particle_density_scalar_params:\n            for method in methods.split(\",\"):\n                depth_average = f\"{output_type}_{res}_{scalar_str}_s_{method}\"\n                raster_depth_list = gs.parse_command(\n                    \"t.rast.list\",\n                    input=depth_average,\n                    format=\"json\"\n                )\n                raster_depth_list= [m['name'] for m in raster_depth_list['data']]\n                output_pngs = []\n                time_steps = get_agg_simwe_time_steps(f\"{output_type}_{res}_{scalar_str}_s_*_{method}\")\n                # print(time_steps)\n                for step in time_steps:\n                    raster_map = f\"depth_{res}_{scalar_str}_s_{step}_{method}\"\n                    output_image = f\"../output/{site}/{PROJECT_MAPSET}/{site}_wave_depth_3d_{res}_{scalar_str}_s_{step}_{method}.png\"\n                    elevation_3dmap = gj.Map3D(width=800, height=600, filename=output_image, use_region=True)\n\n                    # Full list of options m.nviz.image\n                    # https://grass.osgeo.org/grass83/manuals/m.nviz.image.html\n                    elevation_3dmap.render(\n                        elevation_map=raster_map,\n                        color_map=raster_map,\n                        mode=\"fine\",\n                        resolution_fine=1,\n                        # perspective=20, # Clay-Center\n                        # position=0.10,0.91,\n                        # height=22, # Clay-Center\n                        perspective=20, # SJER\n                        # position=0.10,0.91,\n                        height=13, # SJER\n                        zexag=100,\n                        twist=0,\n                        focus=\"454,387,0\", # SJER\n                        # focus=\"688,580,0\",\n                        # bgcolor=\"255:255:255\",\n                        # fringe=['ne','nw','sw','se'],\n                        # fringe_elevation=-0.5,\n                        # light_position=\"0.85,1.0,0.80\",  # Clay-Center\n                        light_position=\"0.7,1.0,0.80\", # SJER\n                        light_brightness=80,\n                        # light_ambient=20,\n                        # light_color=\"255:255:255\",\n                        arrow_position=[100,50]\n                    )\n\n                    try:\n                        elevation_3dmap.overlay.d_legend(raster=raster_map, flags=\"l\", at=(60, 94, 87, 92), title=\"Water depth [m]\", font=\"sans\")\n                    except:\n                        elevation_3dmap.overlay.d_legend(raster=raster_map, flags=\"\", at=(60, 94, 87, 92), title=\"Water depth [m]\", font=\"sans\")\n\n                    output_pngs.append(output_image)\n\n                create_webp_animation(output_pngs, f\"../output/{site}/{PROJECT_MAPSET}/{site}_wave_depth_3d_{res}_{scalar_str}_s_{method}.webp\", fps=1, loop=0)\n\nwave_animation_3d()\n```\n:::\n\n\n",
    "supporting": [
      "agu2024_files"
    ]
  }
}
