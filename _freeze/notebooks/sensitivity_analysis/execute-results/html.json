{
  "hash": "e14bedbd5e3fe720c34acf79a2528b9d",
  "result": {
    "engine": "jupyter",
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    },
    "markdown": "---\ntitle: Sensitivity Analysis\njupyter: python3\nexecute:\n  eval: false\n  freeze: auto\ndate-modified: today\nformat:\n  html:\n    toc: true\n    code-tools: true\n    code-copy: true\n    code-fold: false\n---\n\n\n\n::: {#23757bb8 .cell execution_count=2}\n``` {.python .cell-code}\n# Ask GRASS GIS where its Python packages are.\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Import the GRASS GIS packages we need.\nimport grass.script as gs\n\n# Import GRASS Jupyter\nimport grass.jupyter as gj\n```\n:::\n\n\n\n\n\n\n\n\n\n\nCombines the output from `r.univar` for each model output into a signle dataframe and *CSV* file for analysis.\n\n\n\n::: {#32b6a7f5 .cell execution_count=8}\n``` {.python .cell-code}\nresults_df = pd.read_csv(os.path.join(\"output\", \"combined_stats\", 'combined_analysis_7.csv'))\nresults_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5052 entries, 0 to 5051\nData columns (total 26 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Unnamed: 0      5052 non-null   int64  \n 1   n               5052 non-null   int64  \n 2   null_cells      5052 non-null   int64  \n 3   cells           5052 non-null   int64  \n 4   min             5052 non-null   float64\n 5   max             5052 non-null   float64\n 6   range           5052 non-null   float64\n 7   mean            5052 non-null   float64\n 8   mean_of_abs     5052 non-null   float64\n 9   stddev          5052 non-null   float64\n 10  variance        5052 non-null   float64\n 11  coeff_var       5048 non-null   float64\n 12  sum             5052 non-null   float64\n 13  first_quartile  5052 non-null   float64\n 14  median          5052 non-null   float64\n 15  third_quartile  5052 non-null   float64\n 16  percentiles     5052 non-null   object \n 17  run_time        5052 non-null   float64\n 18  particles       5052 non-null   float64\n 19  area_km2        5052 non-null   float64\n 20  resolution      5052 non-null   int64  \n 21  scalar          5052 non-null   int64  \n 22  minute          5052 non-null   int64  \n 23  stat_type       5052 non-null   object \n 24  ars             5004 non-null   float64\n 25  Location        5052 non-null   object \ndtypes: float64(16), int64(7), object(3)\nmemory usage: 1.0+ MB\n```\n:::\n:::\n\n\nExtracts the history of each model output step to get values returned by SIMWE.\n\n\n\n::: {#24051692 .cell execution_count=10}\n``` {.python .cell-code}\nmodel_runs_df = pd.read_csv(os.path.join(\"output\", \"combined_stats\", 'combined_simulations_7.csv'))\nmodel_runs_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8346 entries, 0 to 8345\nData columns (total 25 columns):\n #   Column                                     Non-Null Count  Dtype  \n---  ------                                     --------------  -----  \n 0   Unnamed: 0                                 8346 non-null   int64  \n 1   init.walk                                  8346 non-null   int64  \n 2   maxwalk                                    8346 non-null   int64  \n 3   remaining walkers                          8346 non-null   int64  \n 4   duration (sec.)                            8346 non-null   int64  \n 5   mean man                                   8346 non-null   float64\n 6   mean infil                                 8346 non-null   float64\n 7   Location                                   8346 non-null   object \n 8   map_name                                   8346 non-null   object \n 9   Cells                                      8346 non-null   int64  \n 10  Min Depth (m)                              8346 non-null   float64\n 11  Max Depth (m)                              8346 non-null   float64\n 12  Seed                                       8346 non-null   int64  \n 13  Resolution (m)                             8346 non-null   int64  \n 14  scalar_str                                 8346 non-null   int64  \n 15  Particle Scalar                            8346 non-null   float64\n 16  Number of iterations (cells)               8346 non-null   int64  \n 17  Mean flow velocity (m/s)                   8346 non-null   float64\n 18  Time Step (s)                              8346 non-null   float64\n 19  Time at Step (s)                           8346 non-null   float64\n 20  Time at Step (min)                         8346 non-null   float64\n 21  Mean Source Rate (Rain Fall Excess) (m/s)  8346 non-null   float64\n 22  Compute Time (s)                           8346 non-null   float64\n 23  particles                                  8346 non-null   float64\n 24  Particle Density                           8346 non-null   float64\ndtypes: float64(13), int64(10), object(2)\nmemory usage: 1.6+ MB\n```\n:::\n:::\n\n\n\n\n::: {#c2cf1843 .cell execution_count=12}\n``` {.python .cell-code}\nsns.pairplot(model_runs_df, hue=\"Resolution (m)\", kind=\"scatter\")\n```\n:::\n\n\n::: {#9dd18973 .cell execution_count=13}\n``` {.python .cell-code}\nsns.pairplot(model_runs_df, hue=\"Location\", kind=\"scatter\")\n```\n:::\n\n\n::: {#519dd72f .cell execution_count=14}\n``` {.python .cell-code}\ngrouped_results_df = (results_df.groupby(by=['resolution', 'scalar', 'Location', 'stat_type', 'minute'])\n        .agg({\n            'run_time': 'mean',\n            'particles': 'mean',\n            'cells': 'mean',\n            # 'area_km2': 'max',\n            # 'p_density': 'max',\n            # \"minute\": \"mean\",\n            'mean': \"mean\",\n            'ars': \"mean\",\n            # \"std\": \"mean\",\n            \"max\": \"mean\",\n            \"min\": \"mean\",\n            \"stddev\": \"mean\"\n        })\n        .reset_index()\n)\n\ngrouped_results_df['log10(particles)'] = np.log10(grouped_results_df['particles'])\ngrouped_results_df['log10(run_time)'] = np.log10(grouped_results_df['run_time'])\ngrouped_results_df['log10(ars)'] = np.log10(grouped_results_df['ars'])\ngrouped_results_df['run_time_min'] = grouped_results_df['run_time'] / 60.0\ngrouped_results_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>resolution</th>\n      <th>scalar</th>\n      <th>Location</th>\n      <th>stat_type</th>\n      <th>minute</th>\n      <th>run_time</th>\n      <th>particles</th>\n      <th>cells</th>\n      <th>mean</th>\n      <th>ars</th>\n      <th>max</th>\n      <th>min</th>\n      <th>stddev</th>\n      <th>log10(particles)</th>\n      <th>log10(run_time)</th>\n      <th>log10(ars)</th>\n      <th>run_time_min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>SFREC</td>\n      <td>average</td>\n      <td>10</td>\n      <td>2780.749446</td>\n      <td>363592.0</td>\n      <td>491046.0</td>\n      <td>0.011785</td>\n      <td>0.960214</td>\n      <td>1.383436</td>\n      <td>0.000253</td>\n      <td>0.033582</td>\n      <td>5.560614</td>\n      <td>3.444162</td>\n      <td>-0.017632</td>\n      <td>46.345824</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>SFREC</td>\n      <td>average</td>\n      <td>20</td>\n      <td>2780.749446</td>\n      <td>363592.0</td>\n      <td>491046.0</td>\n      <td>0.013080</td>\n      <td>0.960214</td>\n      <td>2.766822</td>\n      <td>0.000253</td>\n      <td>0.059275</td>\n      <td>5.560614</td>\n      <td>3.444162</td>\n      <td>-0.017632</td>\n      <td>46.345824</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>SFREC</td>\n      <td>average</td>\n      <td>30</td>\n      <td>2780.749446</td>\n      <td>363592.0</td>\n      <td>491046.0</td>\n      <td>0.014045</td>\n      <td>0.960214</td>\n      <td>3.785676</td>\n      <td>0.000253</td>\n      <td>0.079292</td>\n      <td>5.560614</td>\n      <td>3.444162</td>\n      <td>-0.017632</td>\n      <td>46.345824</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>SFREC</td>\n      <td>average</td>\n      <td>40</td>\n      <td>2780.749446</td>\n      <td>363592.0</td>\n      <td>491046.0</td>\n      <td>0.014865</td>\n      <td>0.960214</td>\n      <td>4.645530</td>\n      <td>0.000253</td>\n      <td>0.096456</td>\n      <td>5.560614</td>\n      <td>3.444162</td>\n      <td>-0.017632</td>\n      <td>46.345824</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>SFREC</td>\n      <td>average</td>\n      <td>50</td>\n      <td>2780.749446</td>\n      <td>363592.0</td>\n      <td>491046.0</td>\n      <td>0.015598</td>\n      <td>0.960214</td>\n      <td>5.409575</td>\n      <td>0.000253</td>\n      <td>0.111816</td>\n      <td>5.560614</td>\n      <td>3.444162</td>\n      <td>-0.017632</td>\n      <td>46.345824</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#81f6af33 .cell execution_count=15}\n``` {.python .cell-code}\nmodel_runs_df.info()\n\n# grouped_results_df['log10(particles)'] = np.log10(grouped_results_df['particles'])\nmodel_runs_df['log10(Compute Time (s))'] = np.log10(model_runs_df['Compute Time (s)'])\n# grouped_results_df['run_time_min'] = grouped_results_df['run_time'] / 60.0\n# grouped_results_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8346 entries, 0 to 8345\nData columns (total 25 columns):\n #   Column                                     Non-Null Count  Dtype  \n---  ------                                     --------------  -----  \n 0   Unnamed: 0                                 8346 non-null   int64  \n 1   init.walk                                  8346 non-null   int64  \n 2   maxwalk                                    8346 non-null   int64  \n 3   remaining walkers                          8346 non-null   int64  \n 4   duration (sec.)                            8346 non-null   int64  \n 5   mean man                                   8346 non-null   float64\n 6   mean infil                                 8346 non-null   float64\n 7   Location                                   8346 non-null   object \n 8   map_name                                   8346 non-null   object \n 9   Cells                                      8346 non-null   int64  \n 10  Min Depth (m)                              8346 non-null   float64\n 11  Max Depth (m)                              8346 non-null   float64\n 12  Seed                                       8346 non-null   int64  \n 13  Resolution (m)                             8346 non-null   int64  \n 14  scalar_str                                 8346 non-null   int64  \n 15  Particle Scalar                            8346 non-null   float64\n 16  Number of iterations (cells)               8346 non-null   int64  \n 17  Mean flow velocity (m/s)                   8346 non-null   float64\n 18  Time Step (s)                              8346 non-null   float64\n 19  Time at Step (s)                           8346 non-null   float64\n 20  Time at Step (min)                         8346 non-null   float64\n 21  Mean Source Rate (Rain Fall Excess) (m/s)  8346 non-null   float64\n 22  Compute Time (s)                           8346 non-null   float64\n 23  particles                                  8346 non-null   float64\n 24  Particle Density                           8346 non-null   float64\ndtypes: float64(13), int64(10), object(2)\nmemory usage: 1.6+ MB\n```\n:::\n:::\n\n\n::: {#cell-fig-nwalk-init.walk .cell execution_count=16}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=model_runs_df,\n    x=\"particles\",\n    y=\"init.walk\",\n    hue=\"Location\",\n    style=\"Resolution (m)\",\n    # size=\"scalar\",\n    err_style=\"bars\",\n    # errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\nplt.xlabel(\"nwalk\", fontsize=26)\nplt.ylabel(\"init.walk\", fontsize=26)\n# plt.title(\"Resolution vs Run Time\")\nplt.savefig(f\"../output/nwalk_init_walk.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![nwalk by init.walk](sensitivity_analysis_files/figure-html/fig-nwalk-init.walk-output-2.png){#fig-nwalk-init.walk}\n:::\n:::\n\n\n::: {#cell-fig-compute_v_resolution .cell execution_count=17}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=model_runs_df,\n    x=\"Resolution (m)\",\n    y=\"log10(Compute Time (s))\",\n    hue=\"Location\",\n    style=\"Particle Density\",\n    # size=\"scalar\",\n    err_style=\"bars\",\n    # errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\nplt.xlabel(\"Resolution (m)\", fontsize=26)\nplt.ylabel(\"log10(Compute Time (s))\", fontsize=26)\n# plt.title(\"Resolution vs Run Time\")\nplt.savefig(f\"../output/compute_time_by_resolution.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Compute Time by Resolution](sensitivity_analysis_files/figure-html/fig-compute_v_resolution-output-2.png){#fig-compute_v_resolution}\n:::\n:::\n\n\n::: {#cell-fig-compute_v_particle_density1 .cell execution_count=18}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\n# model_runs_df['log10(run_time)'] = np.log10(model_runs_df['run_time'])\nsns.lineplot(\n    data=model_runs_df,\n    x=\"Particle Density\",\n    y=\"log10(Compute Time (s))\",\n    hue=\"Location\",\n    style=\"Resolution (m)\",\n    # size=\"AR\",\n    err_style=\"bars\",\n    # errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n# g = sns.JointGrid(data=model_runs_df, x=\"Particle Density\", y=\"log10(run_time)\", space=0)\n# g.plot_joint(sns.kdeplot,\n#              fill=True, clip=((0, 3), (-2.0, 3.0)),\n#              thresh=0, levels=100, cmap=\"rocket\")\n# g.plot_marginals(sns.histplot, palette=\"rocket\", hue=\"Location\", alpha=1, bins=25, data=model_runs_df)\nplt.xticks([0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2])\nplt.xlabel(\"Particle Density\", fontsize=26)\nplt.ylabel(\"log10(Compute Time (s))\", fontsize=26)\nplt.savefig(f\"../output/compute_time_by_particle_density.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Compute Time by Particle Density](sensitivity_analysis_files/figure-html/fig-compute_v_particle_density1-output-2.png){#fig-compute_v_particle_density1}\n:::\n:::\n\n\n::: {#cell-fig-simulated_timestep_max_water_depth .cell execution_count=19}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=model_runs_df,\n    x=\"Time at Step (min)\",\n    y=\"Max Depth (m)\",\n    hue=\"Location\",\n    style=\"Resolution (m)\",\n    size=\"Resolution (m)\",\n    err_style=\"bars\",\n    # errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\nplt.xlabel(\"Time at Step (min)\", fontsize=26)\nplt.ylabel(\"Max Depth (m)\", fontsize=26)\n# plt.title(\"Simulation Time Step vs Max Water Depth\")\nplt.savefig(f\"../output/simulated_timestep_max_water_depth.png\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Time Step by Max Depth](sensitivity_analysis_files/figure-html/fig-simulated_timestep_max_water_depth-output-2.png){#fig-simulated_timestep_max_water_depth}\n:::\n:::\n\n\n::: {#cell-fig-compute_v_particle_density .cell execution_count=20}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\ng = sns.catplot(\n    data=model_runs_df,\n    x=\"Time at Step (min)\",\n    y=\"Mean flow velocity (m/s)\",\n    hue=\"Location\",\n    col=\"Particle Density\",\n    row=\"Resolution (m)\",\n    palette=\"YlGnBu_d\",\n    sharex=False,\n    sharey=False,\n    # errorbar=\"se\",\n    kind=\"strip\",\n    height=6, aspect=.75,\n)\ng.despine(left=True)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Time at Step (min) by Mean flow velocity (m/s)](sensitivity_analysis_files/figure-html/fig-compute_v_particle_density-output-2.png){#fig-compute_v_particle_density}\n:::\n:::\n\n\n::: {#0e82e960 .cell execution_count=21}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=results_df,\n    x=\"resolution\",\n    y=\"run_time\",\n    hue=\"Location\",\n    style=\"scalar\",\n    # size=\"scalar\",\n    err_style=\"bars\", errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    # errorbar=('ci', 95),\n)\nplt.title(\"Resolution vs Run Time\")\n```\n:::\n\n\n::: {#82d31e21 .cell execution_count=22}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=results_df,\n    x=\"scalar\",\n    y=\"run_time\",\n    hue=\"Location\",\n    style=\"resolution\",\n    # size=\"scalar\",\n    err_style=\"bars\", #errorbar=(\"se\", 2),\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nplt.title(\"Particles Density vs Run Time\")\n# plt.savefig(f\"../output/agu2024_particles_run_time.png\")\n```\n:::\n\n\n::: {#fig-particle_density_v_run_time .cell execution_count=23}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\n# fig, ax = plt.subplots(figsize=(12, 8))\nsns.relplot(\n    data=results_df, x=\"resolution\", y=\"run_time\",\n    col=\"Location\",\n    hue=\"Location\", style=\"scalar\",\n    kind=\"line\"\n)\n\n\n# sns.lineplot(\n#     data=grouped_results_df,\n#     x=\"scalar\",\n#     y=\"run_time\",\n#     hue=\"site_name\",\n#     style=\"resolution\",\n#     # size=\"scalar\",\n#     err_style=\"bars\", #errorbar=(\"se\", 2),\n#     palette=\"magma\",\n#     markers=True,\n#     alpha=0.75,\n#     errorbar=('ci', 95),\n# )\nplt.title(\"Particles Density vs Run Time\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/home/coreywhite/.local/lib/python3.10/site-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n```\n:::\n\n::: {#fig-particle_density_v_run_time-1 .cell-output .cell-output-display execution_count=11}\n```\nText(0.5, 1.0, 'Particles Density vs Run Time')\n```\n\nParticles Density vs Run Time\n:::\n\n::: {.cell-output .cell-output-display}\n![](sensitivity_analysis_files/figure-html/fig-particle_density_v_run_time-output-3.png){#fig-particle_density_v_run_time-2}\n:::\n:::\n\n\n::: {#dc17ece3 .cell execution_count=24}\n``` {.python .cell-code}\nsns.relplot(\n    data=results_df, x=\"particles\", y=\"run_time\",\n    col=\"Location\",\n    hue=\"Location\", style=\"scalar\",\n    kind=\"line\"\n)\n```\n:::\n\n\n::: {#96fd470f .cell execution_count=25}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\n# sns.lineplot(\n#     data=grouped_results_df.query(\"stat_type == 'average'\"),\n#     # x=\"p_density\",\n#     x=\"ars\",\n#     y=\"max\",\n#     # y=\"run_time_min\",\n#     hue=\"site_name\",\n#     size=\"scalar\",\n#     palette=\"crest_r\",\n#     markers=True,\n#     # style='resolution',\n#     alpha=0.75,\n#     errorbar=('ci', 95)\n# )\n\n\n\n# ax2 = plt.twinx()\n\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average'\"),\n    # x=\"p_density\",\n    x=\"ars\",\n    y=\"run_time\",\n    # y=\"run_time_min\",\n    hue=\"Location\",\n    # size=\"resolution\",\n    palette=\"magma\",\n    markers=True,\n    style='resolution',\n    alpha=0.75,\n    errorbar=('ci', 95),\n    # ax=ax2\n)\nplt.xlabel(\"ARS\", fontsize=26)\nplt.ylabel(\"Compute Time (s)\", fontsize=26)\n# plt.title(\"Run time vs. ARS\", fontsize=32)\n# plt.legend(title=\"Particle Density\", fontsize=18)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1.25,1))\n# sns.move_legend(ax2, \"upper left\", bbox_to_anchor=(1.25,0.25))\n# ax2.set_ylabel(\"Resolution (m)\", fontsize=26)\n\n# plt.savefig(os.path.join(\"../output\", site, mapset, f'{site}_run_time_res_line_plot.png'))\n\nplt.savefig(f\"../output/sensitivity7_run_time_ars_plot.png\")\nplt.show()\n```\n:::\n\n\n::: {#e50812a1 .cell execution_count=26}\n``` {.python .cell-code}\n# g = sns.JointGrid(data=grouped_results_df.query(\"stat_type == 'average'\"), x=\"ars\", y=\"run_time\", space=0)\n# g.plot_joint(sns.kdeplot,\n#              fill=True, clip=((0, 3), (0, 200)),\n#              thresh=0, levels=100, cmap=\"rocket\")\n# g.plot_marginals(sns.histplot, color=\"#03051A\", alpha=1, bins=25)\n\n# Plot sepal width as a function of sepal_length across days\ng = sns.lmplot(\n    data=grouped_results_df.query(\"stat_type == 'average'\"),\n    x=\"ars\", y=\"run_time\", hue=\"Location\",\n    height=5\n)\n\n# Use more informative axis labels than are provided by default\ng.set_axis_labels(\"ARS\", \"Compute Time (Sec)\")\n```\n:::\n\n\n::: {#f9b39d3a .cell execution_count=27}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.despine(fig, left=True, bottom=True)\n# scalar_ranking = [\"I1\", \"SI2\", \"SI1\", \"VS2\", \"VS1\", \"VVS2\", \"VVS1\", \"IF\"]\n\n\nsns.scatterplot(\n    # x=\"ars\",\n    # y=\"run_time\",\n    x=\"log10(ars)\",\n    y=\"log10(run_time)\",\n    hue=\"Location\", size=\"resolution\",\n    style=\"scalar\",\n    # palette=\"ch:r=-.2,d=.3_r\",\n    palette=\"magma\",\n    # hue_order=clarity_ranking,\n    sizes=(10, 50), linewidth=0,\n    data=grouped_results_df.query(\"stat_type == 'average'\"), ax=ax\n)\n\n# sns.regplot(\n#     data=grouped_results_df.query(\"stat_type == 'average' and Location == 'clay-center'\"),\n#     x=\"ars\",\n#     y=\"run_time\",\n#     order=2,\n#     color=\"black\",\n#     ci=95,\n#     scatter=False,\n#     line_kws=dict(linewidth=1, linestyle=\"--\"),\n# )\n# sns.regplot(\n#     data=grouped_results_df.query(\"stat_type == 'average' and Location == 'coweeta'\"),\n#     x=\"ars\",\n#     y=\"run_time\",\n#     order=2,\n#     color=\"black\",\n#     ci=95,\n#     scatter=False,\n#     line_kws=dict(linewidth=1, linestyle=\"--\"),\n# )\n# sns.regplot(\n#     data=grouped_results_df.query(\"stat_type == 'average' and Location == 'SJER'\"),\n#     x=\"ars\",\n#     y=\"run_time\",\n#     order=2,\n#     color=\"black\",\n#     ci=95,\n#     scatter=False,\n#     line_kws=dict(linewidth=1, linestyle=\"--\"),\n# )\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.xlabel(\"ARS\", fontsize=26)\nplt.ylabel(\"log10(Compute Time (Sec))\", fontsize=26)\nplt.savefig(f\"../output/sensitivity7_ars_run_time_loc_res_scalar_plot.png\")\n```\n:::\n\n\n::: {#0bdd8ab4 .cell execution_count=28}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df,\n    x=\"log10(particles)\",\n    y=\"log10(run_time)\",\n    hue=\"Location\",\n    # size=\"resolution\",\n    style=\"resolution\",\n    # weights=\"error\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nplt.xlabel(\"log10(Particles)\", fontsize=26)\nplt.ylabel(\"log10(Compute Time (s))\", fontsize=26)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\n# plt.title(\"Particles vs Run Time\")\n# plt.savefig(f\"../output/agu2024_particles_run_time.png\")\nplt.savefig(f\"../output/particles_run_time.png\")\n```\n:::\n\n\n::: {#20724739 .cell execution_count=29}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df,\n    x=\"cells\",\n    y=\"log10(particles)\",\n    hue=\"Location\",\n    style=\"scalar\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.title(\"Particles vs Resolution\")\n# plt.savefig(f\"../output/agu2024_particles_resolution.png\")\n```\n:::\n\n\n::: {#4d29650e .cell execution_count=30}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average'\"),\n    x=\"log10(particles)\",\n    y=\"log10(run_time)\",\n    hue=\"cells\",\n    style=\"Location\",\n    # size=\"scalar\",\n    palette=\"magma_r\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\nplt.xlabel(\"log10(Particles)\", fontsize=26)\nplt.ylabel(\"log10(Compute Time (s))\", fontsize=26)\n# plt.title(\"ARS vs log10(Run Time)\")\nplt.savefig(f\"../output/agu2024_ars_run_time.png\")\n```\n:::\n\n\n::: {#87d3d6e2 .cell execution_count=31}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average'\"),\n    x=\"log10(particles)\",\n    y=\"max\",\n    hue=\"Location\",\n    # style=\"minute\",\n    palette=\"magma_r\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.title(\"log10(particles) by Max Depth\")\n```\n:::\n\n\n::: {#d67d29a5 .cell execution_count=32}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average'\"),\n    x=grouped_results_df.query(\"stat_type == 'average'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"Location\",\n    style=\"resolution\",\n    size=\"resolution\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\n# plt.title(\"Mean Depth by Output Step\")\nplt.xlabel(\"Output Step (Minutes)\", fontsize=26)\nplt.ylabel(\"Mean Depth (m)\", fontsize=26)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.savefig(f\"../output/agu2024_minute_mean_resolution.png\")\n```\n:::\n\n\n::: {#689ca7db .cell execution_count=33}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'maximum'\"),\n    x=grouped_results_df.query(\"stat_type == 'maximum'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"Location\",\n    size=\"resolution\",\n    style=\"resolution\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nplt.xlabel(\"Output Step (Minutes)\", fontsize=26)\nplt.ylabel(\"Maximum Depth (m)\", fontsize=26)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\n# plt.title(\"Maximum Depth by Output Step\")\nplt.savefig(f\"../output/agu2024_minute_max_resolution.png\")\n```\n:::\n\n\n::: {#953adf47 .cell execution_count=34}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'minimum'\"),\n    x=grouped_results_df.query(\"stat_type == 'minimum'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"Location\",\n    style=\"resolution\",\n    size=\"resolution\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\n# plt.title(\"Min Depth by Time Step\")\nplt.xlabel(\"Output Step (Minutes)\", fontsize=26)\nplt.ylabel(\"Minimum Depth (m)\", fontsize=26)\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.savefig(f\"../output/agu2024_minute_min_resolution.png\")\n```\n:::\n\n\n::: {#2c27f9c9 .cell execution_count=35}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"talk\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'stddev'\"),\n    x=grouped_results_df.query(\"stat_type == 'stddev'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"Location\",\n    style=\"resolution\",\n    size=\"resolution\",\n    palette=\"magma\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nplt.title(\"Stddev Depth by Time Step\")\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n\nplt.savefig(f\"../output/agu2024_minute_std_resolution.png\")\n```\n:::\n\n\n::: {#da6ba1f9 .cell execution_count=36}\n``` {.python .cell-code}\nsns.set_theme(style=\"darkgrid\")\nsns.set_context(\"paper\")\nsns.color_palette(\"crest\", as_cmap=True)\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average' & Location == 'clay-center'\"),\n    x=grouped_results_df.query(\"stat_type == 'average' & Location == 'clay-center'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"resolution\",\n    # style=\"resolution\",\n    size=\"scalar\",\n    palette=\"summer\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nsns.lineplot(\n    data=grouped_results_df.query(\"stat_type == 'average' & Location == 'SJER'\"),\n    x=grouped_results_df.query(\"stat_type == 'average' & Location == 'SJER'\")[\"minute\"].astype(int),\n    y=\"mean\",\n    hue=\"resolution\",\n    # style=\"scalar\",\n    size=\"scalar\",\n    palette=\"cool\",\n    markers=True,\n    alpha=0.75,\n    errorbar=('ci', 95),\n)\nplt.title(\"Min Depth by Time Step\")\nplt.savefig(f\"../output/agu2024_minute_average_scalar.png\")\n```\n:::\n\n\n",
    "supporting": [
      "sensitivity_analysis_files"
    ]
  }
}
